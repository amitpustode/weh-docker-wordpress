"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var rxjs_1=require("rxjs"),Combiner_1=require("./Combiner"),State_1=require("./State");describe("Combiner",function(){it("observeAll has '[undefined, undefined]' state after creation",function(e){var t=new rxjs_1.Subject,a=new rxjs_1.Subject,o=State_1.observableToState(t),r=State_1.observableToState(a);Combiner_1.combine(o,r).changes$().subscribe(function(t){assert.deepEqual(t,[void 0,void 0]),e()})}),it("observeNonValues has '[undefined, undefined]' state after creation",function(e){var t=new rxjs_1.Subject,a=new rxjs_1.Subject,o=State_1.observableToState(t),r=State_1.observableToState(a);Combiner_1.combine(o,r).nonValues$().subscribe(function(t){assert.deepEqual(t,[void 0,void 0]),e()})}),it("observeNonValues emits values while no all input states have a value",function(e){var t=new rxjs_1.Subject,a=new rxjs_1.Subject,o=State_1.observableToState(t);t.next(1);var r=State_1.observableToState(a);Combiner_1.combine(o,r).changes$().subscribe(function(t){assert.deepEqual(t,[1,void 0]),e()})}),it("observeValues emits values if all input states already have a value",function(e){var t=new rxjs_1.BehaviorSubject(1),a=State_1.observableToState(t),o=new rxjs_1.BehaviorSubject(2),r=State_1.observableToState(o);Combiner_1.combine(a,r).values$().subscribe(function(t){assert.deepEqual(t,[1,2]),e()})}),it("observeValues emits values once all input states have a value",function(e){var t=new rxjs_1.Subject,a=State_1.observableToState(t),o=new rxjs_1.Subject,r=State_1.observableToState(o);Combiner_1.combine(a,r).values$().subscribe(function(t){assert.deepEqual(t,[1,2]),e()}),t.next(1),o.next(2)}),it("nonValues$ has the correct value after connect/disconnect",function(){var e=new rxjs_1.Subject,t=State_1.observableToState(e),a=new rxjs_1.Subject,o=State_1.observableToState(a),r=Combiner_1.combine(t,o),s=[];r.nonValues$().subscribe(function(e){s.push(e)}),r.disconnect(),r.connect(),r.disconnect(),r.connect(),assert.deepEqual(s,[[void 0,void 0],[void 0,void 0],[void 0,void 0]])}),it("combine3",function(e){var t=State_1.observableToState(new rxjs_1.BehaviorSubject(1)),a=State_1.observableToState(new rxjs_1.BehaviorSubject(2)),o=State_1.observableToState(new rxjs_1.BehaviorSubject(3));Combiner_1.combine(t,a,o).values$().subscribe(function(t){assert.deepEqual(t,[1,2,3]),e()})}),it("combine4",function(e){var t=State_1.observableToState(new rxjs_1.BehaviorSubject(1)),a=State_1.observableToState(new rxjs_1.BehaviorSubject(2)),o=State_1.observableToState(new rxjs_1.BehaviorSubject(3)),r=State_1.observableToState(new rxjs_1.BehaviorSubject(4));Combiner_1.combine(t,a,o,r).values$().subscribe(function(t){assert.deepEqual(t,[1,2,3,4]),e()})}),it("combine5",function(e){var t=State_1.observableToState(new rxjs_1.BehaviorSubject(1)),a=State_1.observableToState(new rxjs_1.BehaviorSubject(2)),o=State_1.observableToState(new rxjs_1.BehaviorSubject(3)),r=State_1.observableToState(new rxjs_1.BehaviorSubject(4)),s=State_1.observableToState(new rxjs_1.BehaviorSubject(5));Combiner_1.combine(t,a,o,r,s).values$().subscribe(function(t){assert.deepEqual(t,[1,2,3,4,5]),e()})}),it("combine6",function(e){var t=State_1.observableToState(new rxjs_1.BehaviorSubject(1)),a=State_1.observableToState(new rxjs_1.BehaviorSubject(2)),o=State_1.observableToState(new rxjs_1.BehaviorSubject(3)),r=State_1.observableToState(new rxjs_1.BehaviorSubject(4)),s=State_1.observableToState(new rxjs_1.BehaviorSubject(5)),b=State_1.observableToState(new rxjs_1.BehaviorSubject(6));Combiner_1.combine(t,a,o,r,s,b).values$().subscribe(function(t){assert.deepEqual(t,[1,2,3,4,5,6]),e()})})});
//# sourceMappingURL=Combiner.test.js.map
