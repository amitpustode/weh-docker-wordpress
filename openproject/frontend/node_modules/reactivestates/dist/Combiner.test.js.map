{"version":3,"sources":["../src/Combiner.test.ts"],"names":["rxjs_1","require","Combiner_1","State_1","describe","it","done","dummy1","Subject","dummy2","state1","observableToState","state2","combine","changes$","subscribe","i","assert","deepEqual","undefined","nonValues$","next","both","BehaviorSubject","values$","combined","calls","val","push","disconnect","connect","state3","all","state4","state5","state6"],"mappings":"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","file":"Combiner.test.js","sourcesContent":["import {BehaviorSubject, Subject} from \"rxjs\";\nimport {combine, CombinerState} from \"./Combiner\";\nimport {observableToState} from \"./State\";\n\ndescribe(\"Combiner\", function () {\n\n    it(\"observeAll has '[undefined, undefined]' state after creation\", function (done) {\n        const dummy1 = new Subject<number>();\n        const dummy2 = new Subject<number>();\n        const state1 = observableToState(dummy1);\n        const state2 = observableToState(dummy2);\n\n        const combined: CombinerState<[number, number], [undefined, undefined]> = combine(state1, state2);\n        combined.changes$()\n                .subscribe(i => {\n                    assert.deepEqual<any>(i, [undefined, undefined]);\n                    done();\n                });\n    });\n\n    it(\"observeNonValues has '[undefined, undefined]' state after creation\", function (done) {\n        const dummy1 = new Subject<number>();\n        const dummy2 = new Subject<number>();\n        const state1 = observableToState(dummy1);\n        const state2 = observableToState(dummy2);\n\n        const combined = combine(state1, state2);\n        combined.nonValues$()\n                .subscribe(i => {\n                    assert.deepEqual<any>(i, [undefined, undefined]);\n                    done();\n                });\n    });\n\n    it(\"observeNonValues emits values while no all input states have a value\", function (done) {\n        const dummy1 = new Subject<number>();\n        const dummy2 = new Subject<number>();\n        const state1 = observableToState(dummy1);\n        dummy1.next(1);\n\n        const state2 = observableToState(dummy2);\n\n        const combined = combine(state1, state2);\n\n        combined.changes$()\n                .subscribe(both => {\n                    assert.deepEqual<any>(both, [1, undefined]);\n                    done();\n                });\n    });\n\n    it(\"observeValues emits values if all input states already have a value\", function (done) {\n        const dummy1 = new BehaviorSubject(1);\n        const state1 = observableToState(dummy1);\n\n        const dummy2 = new BehaviorSubject(2);\n        const state2 = observableToState(dummy2);\n\n        const combined = combine(state1, state2);\n        combined.values$()\n                .subscribe(both => {\n                    assert.deepEqual(both, [1, 2]);\n                    done();\n                });\n    });\n\n    it(\"observeValues emits values once all input states have a value\", function (done) {\n        const dummy1 = new Subject<number>();\n\n        const state1 = observableToState(dummy1);\n\n        const dummy2 = new Subject<number>();\n        const state2 = observableToState(dummy2);\n\n        const combined = combine(state1, state2);\n\n        combined.values$()\n                .subscribe(both => {\n                    assert.deepEqual(both, [1, 2]);\n                    done();\n                });\n\n        dummy1.next(1);\n        dummy2.next(2);\n    });\n\n    it(\"nonValues$ has the correct value after connect/disconnect\", function () {\n        const dummy1 = new Subject<number>();\n        const state1 = observableToState(dummy1);\n\n        const dummy2 = new Subject<number>();\n        const state2 = observableToState(dummy2);\n\n        const combined = combine(state1, state2);\n\n        const calls: any[] = [];\n        combined.nonValues$()\n                .subscribe(val => {\n                    calls.push(val);\n                });\n\n        combined.disconnect();\n        combined.connect();\n        combined.disconnect();\n        combined.connect();\n\n        assert.deepEqual<any>(calls, [\n            [undefined, undefined],\n            [undefined, undefined],\n            [undefined, undefined]\n        ]);\n    });\n\n    it(\"combine3\", function (done) {\n        const state1 = observableToState(new BehaviorSubject<number>(1));\n        const state2 = observableToState(new BehaviorSubject<number>(2));\n        const state3 = observableToState(new BehaviorSubject<number>(3));\n        const combined = combine(state1, state2, state3);\n        combined.values$()\n                .subscribe(all => {\n                    assert.deepEqual(all, [1, 2, 3]);\n                    done();\n                });\n    });\n\n    it(\"combine4\", function (done) {\n        const state1 = observableToState(new BehaviorSubject<number>(1));\n        const state2 = observableToState(new BehaviorSubject<number>(2));\n        const state3 = observableToState(new BehaviorSubject<number>(3));\n        const state4 = observableToState(new BehaviorSubject<number>(4));\n        const combined = combine(state1, state2, state3, state4);\n        combined.values$()\n                .subscribe(all => {\n                    assert.deepEqual(all, [1, 2, 3, 4]);\n                    done();\n                });\n    });\n\n    it(\"combine5\", function (done) {\n        const state1 = observableToState(new BehaviorSubject<number>(1));\n        const state2 = observableToState(new BehaviorSubject<number>(2));\n        const state3 = observableToState(new BehaviorSubject<number>(3));\n        const state4 = observableToState(new BehaviorSubject<number>(4));\n        const state5 = observableToState(new BehaviorSubject<number>(5));\n        const combined = combine(state1, state2, state3, state4, state5);\n        combined.values$()\n                .subscribe(all => {\n                    assert.deepEqual(all, [1, 2, 3, 4, 5]);\n                    done();\n                });\n    });\n\n    it(\"combine6\", function (done) {\n        const state1 = observableToState(new BehaviorSubject<number>(1));\n        const state2 = observableToState(new BehaviorSubject<number>(2));\n        const state3 = observableToState(new BehaviorSubject<number>(3));\n        const state4 = observableToState(new BehaviorSubject<number>(4));\n        const state5 = observableToState(new BehaviorSubject<number>(5));\n        const state6 = observableToState(new BehaviorSubject<number>(6));\n        const combined = combine(state1, state2, state3, state4, state5, state6);\n        combined.values$()\n                .subscribe(all => {\n                    assert.deepEqual(all, [1, 2, 3, 4, 5, 6]);\n                    done();\n                });\n    });\n\n});\n"],"sourceRoot":"/"}