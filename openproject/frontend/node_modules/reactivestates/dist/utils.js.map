{"version":3,"sources":["../src/utils.ts"],"names":["If","input","ifLogic","DerivedState_1","derive","$","map","v","undefined","IfThen","switchLogic","then","ifState","both","Combiner_1","combine","_a","require","exports"],"mappings":"aAIA,SAAAA,GAA2BC,EAAsBC,GAC7C,OAAOC,eAAAC,OAAOH,EAAO,SAAAI,GAAK,OAAAA,EAAEC,IAAI,SAAAC,GAAK,OAAAL,EAAQK,GAAKA,OAAIC,MAG1D,SAAAC,OAAuCR,EAAsBS,EAAmCC,GAC5F,IAAMC,EAA+CZ,GAAGC,EAAOS,GACzDG,EAAiDC,WAAAC,QAAQH,EAASD,GACxE,OAAOR,eAAAC,OAA0BS,EAAM,SAAAR,GAAK,OAAAA,EAAEC,IAAI,SAACU,GAAY,OAATA,EAAA,8DAV1D,IAAAb,eAAAc,QAAA,kBACAH,WAAAG,QAAA,cAEAC,QAAAlB,GAAAA,GAIAkB,QAAAT,OAAAA","file":"utils.js","sourcesContent":["import {State} from \"./State\";\nimport {derive, DerivedState} from \"./DerivedState\";\nimport {combine, CombinerState} from \"./Combiner\";\n\nexport function If<IT, IX>(input: State<IT, IX>, ifLogic: (val: IT) => boolean): DerivedState<IT, IX, IT, undefined> {\n    return derive(input, $ => $.map(v => ifLogic(v) ? v : undefined));\n}\n\nexport function IfThen<IT, IX, OT, OX>(input: State<IT, IX>, switchLogic: (val: IT) => boolean, then: State<OT, OX>): DerivedState<[IT, OT], undefined, OT, undefined> {\n    const ifState: DerivedState<IT, IX, IT, undefined> = If(input, switchLogic);\n    const both: CombinerState<[IT, OT], [undefined, OX]> = combine(ifState, then);\n    return derive<[IT, OT], OT, any>(both, $ => $.map(([, out]) => out));\n}\n"],"sourceRoot":"/"}