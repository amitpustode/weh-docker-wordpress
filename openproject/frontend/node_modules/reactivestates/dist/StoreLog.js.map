{"version":3,"sources":["../src/StoreLog.ts"],"names":["defaultLog","event","_","hasIn","console","log_1","logTimePeriodDivider","group","name","changes","forEach","_a","changeType","fieldName","value","log","cssStyleGreenOnWhite","cssStyleBlueOnWhite","cssStyleRedOnWhite","groupEnd","setLogger","fn","logFn","logStoreEvent","isLogEnabled","require","LogEvent","stack","this","exports"],"mappings":"aAiBA,SAAAA,WAA2BC,GACIC,EAAEC,MAAMC,QAAS,UAOxCC,MAAAC,uBACAF,QAAQG,MAAMN,EAAMO,MACpBP,EAAMQ,QAAQC,QAAQ,SAACC,OAACC,EAAAD,EAAA,GAAYE,EAAAF,EAAA,GAAWG,EAAAH,EAAA,GACxB,UAAfC,EACAR,QAAQW,IAAI,KAAOF,EAAY,MAAOR,MAAAW,qBAAsBF,GACtC,YAAfF,EACPR,QAAQW,IAAI,KAAOF,EAAY,MAAOR,MAAAY,oBAAqBH,GACrC,YAAfF,GACPR,QAAQW,IAAI,KAAOF,EAAWR,MAAAa,sBAQtCd,QAAQe,aArBRf,QAAQW,IAAId,EAAMO,MAClBP,EAAMQ,QAAQC,QAAQ,SAACC,OAACC,EAAAD,EAAA,GAAYE,EAAAF,EAAA,GAAWG,EAAAH,EAAA,GAC3CP,QAAQW,IAAI,QAAUH,EAAa,KAAOC,EAAY,MAAQC,MAuB1E,SAAAM,UAA0BC,GACtBC,MAAQD,EAGZ,SAAAE,cAA8BtB,GACtBI,MAAAmB,gBACAF,MAAMrB,0DAnDd,IAAAC,EAAAuB,QAAA,UACApB,MAAAoB,QAAA,SAKIH,MAAmCtB,WAIvC0B,SAAA,WACI,SAAAA,EAAmBlB,EACAC,EACAkB,GAFAC,KAAApB,KAAAA,EACAoB,KAAAnB,QAAAA,EACAmB,KAAAD,MAAAA,EAEvB,OAAAD,KALaG,QAAAH,SAAAA,SAObG,QAAA7B,WAAAA,WA4BA6B,QAAAT,UAAAA,UAIAS,QAAAN,cAAAA","file":"StoreLog.js","sourcesContent":["import * as _ from \"lodash\";\nimport {\n    cssStyleBlueOnWhite, cssStyleGreenOnWhite, cssStyleGreyOnWhite, cssStyleRedOnWhite, isLogEnabled,\n    logTimePeriodDivider\n} from \"./log\";\n\nlet logFn: (event: LogEvent) => void = defaultLog;\n\nexport type FieldChangeType = \"added\" | \"changed\" | \"removed\";\n\nexport class LogEvent {\n    constructor(public name: string,\n                public changes: [FieldChangeType, string, any][],\n                public stack: string | undefined) {\n    }\n}\n\nexport function defaultLog(event: LogEvent) {\n    const isBrowser: boolean = _.hasIn(console, \"group\");\n    if (!isBrowser) {\n        console.log(event.name);\n        event.changes.forEach(([changeType, fieldName, value]) => {\n            console.log(\"    [\" + changeType + \"] \" + fieldName + \" = \" + value);\n        });\n    } else {\n        logTimePeriodDivider();\n        console.group(event.name);\n        event.changes.forEach(([changeType, fieldName, value]) => {\n            if (changeType === \"added\") {\n                console.log(\"%c\" + fieldName + \" %o\", cssStyleGreenOnWhite, value);\n            } else if (changeType === \"changed\") {\n                console.log(\"%c\" + fieldName + \" %o\", cssStyleBlueOnWhite, value);\n            } else if (changeType === \"removed\") {\n                console.log(\"%c\" + fieldName, cssStyleRedOnWhite);\n            }\n        });\n\n        // if (event.stack) {\n        //     console.log(\"%cStack %o\", cssStyleGreyOnWhite, event.stack.split(\"\\n\");\n        // }\n\n        console.groupEnd();\n    }\n}\n\nexport function setLogger(fn: (event: LogEvent) => void) {\n    logFn = fn;\n}\n\nexport function logStoreEvent(event: LogEvent) {\n    if (isLogEnabled()) {\n        logFn(event);\n    }\n}\n"],"sourceRoot":"/"}