import { Observable } from "rxjs";
import { IsNonValueFn, State } from "./State";
export declare class DerivedState<IT, IX, OT, OX> extends State<OT, OX> {
    private readonly inputState;
    private readonly defaultWhenInputHasNonValue?;
    constructor(inputState: State<IT, IX>, stream: Observable<OT | OX>, isNonValue: IsNonValueFn<OT, OX>, defaultNonValue: OX, defaultWhenInputHasNonValue: OT | OX);
}
export declare function deriveRaw<IT, IX, OT>(state: State<IT, IX>, transformer: ($: Observable<IT | IX>, inputState: State<IT, IX>) => Observable<OT | undefined>): DerivedState<IT, IX, OT, undefined>;
export declare function derive<IT, OT, IX = undefined>(state: State<IT, IX>, transformer: ($: Observable<IT>, inputState: State<IT, IX>) => Observable<OT | undefined>, defaultWhenInputHasNonValue?: OT): DerivedState<IT, IX, OT, undefined>;
