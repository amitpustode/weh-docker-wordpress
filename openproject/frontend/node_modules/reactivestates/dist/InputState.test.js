"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var InputState_1=require("./InputState"),rxjs_1=require("rxjs");describe("InputState",function(){it("is empty after creation",function(){var e=InputState_1.input();assert.isFalse(e.hasValue()),e.values$().subscribe(function(){throw new Error})}),it("can have an initial value",function(e){InputState_1.input(5).changes$().subscribe(function(t){assert.equal(t,5),e()})}),it("replays the initial value on every connect",function(){var e=[],t=InputState_1.input(5);t.changes$().subscribe(function(t){e.push(t)}),t.disconnect(),t.connect(),t.disconnect(),t.connect(),assert.deepEqual(e,[5,void 0,5,void 0,5])}),it("broadcasts value",function(e){var t=InputState_1.input();t.putValue(1),t.changes$().subscribe(function(t){assert.equal(t,1),e()})}),it("can be cleared",function(){var e=InputState_1.input(5);e.clear(),e.values$().subscribe(function(){throw new Error("state should be cleared")})}),it("can modify the state from a value",function(e){var t=InputState_1.input(5);t.doModify(function(e){return e+1}),t.values$().subscribe(function(t){assert.equal(t,6),e()})}),it("can modify the state from Observable",function(e){var t=InputState_1.input(5);t.doModify(function(e){return rxjs_1.Observable.of(e+1)}),t.values$().subscribe(function(t){assert.equal(t,6),e()})}),it("can modify the state if it has a nonValue",function(e){var t=InputState_1.input();t.doModify(function(){throw new Error("must not be called")},function(){return 9}),t.values$().subscribe(function(t){assert.equal(t,9),e()})}),it("calls doOnValue with initial value of 0",function(e){InputState_1.input(0).values$().subscribe(function(t){assert.equal(t,0),e()})}),it("putFromPromise",function(e){var t=InputState_1.input(0);t.clearAndPutFromPromise(rxjs_1.Observable.timer(0).take(1).toPromise()),assert.isFalse(t.hasValue()),t.values$().subscribe(function(s){assert.equal(s,0),assert.isTrue(t.hasValue()),e()})}),it("hasActivePromiseRequest",function(e){var t=InputState_1.input(0);t.clearAndPutFromPromise(rxjs_1.Observable.timer(0).take(1).toPromise()),assert.isFalse(t.hasValue()),assert.isTrue(t.hasActivePromiseRequest()),t.values$().subscribe(function(s){assert.equal(s,0),assert.isTrue(t.hasValue()),assert.isFalse(t.hasActivePromiseRequest()),e()})}),it("isPristine",function(){var e=InputState_1.input();assert.isTrue(e.isPristine()),e.clearAndPutFromPromise(rxjs_1.Observable.timer(0).take(1).toPromise()),assert.isFalse(e.isPristine()),assert.isFalse(e.hasValue())}),it("putFromPromiseIfPristine",function(e){var t=InputState_1.input();t.putFromPromiseIfPristine(function(){return rxjs_1.Observable.timer(0).take(1).toPromise()}),assert.isTrue(t.hasActivePromiseRequest()),assert.isFalse(t.hasValue()),t.putFromPromiseIfPristine(function(){throw new Error("must not be called")}),t.values$().subscribe(function(s){assert.equal(s,0),assert.isTrue(t.hasValue()),assert.isFalse(t.hasActivePromiseRequest()),e()})})});
//# sourceMappingURL=InputState.test.js.map
