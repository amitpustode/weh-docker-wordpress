import { Observable } from "rxjs/Observable";
import { InputState } from "./InputState";
export declare type StateMembers<T> = {
    [P in keyof T]: InputState<T[P]>;
};
export interface ActionOptions<T> {
    afterAction?: (store: Store<T>, data: T, touchedFields: Set<string>, newFields: Set<string>) => void;
}
export interface SelectEvent<T> {
    data: T;
    fields: Set<keyof T>;
}
export declare abstract class Store<T> {
    readonly states: StateMembers<T>;
    private currentData;
    private transientDataInAction;
    private actionCompleted;
    constructor(data: T);
    protected action(name: string, fn: (data: T, bla: any) => void, options?: ActionOptions<T>): void;
    readonly data: T;
    select<K extends keyof T>(...fields: K[]): Observable<SelectEvent<T>>;
    selectAll<K extends keyof T>(): Observable<SelectEvent<T>>;
}
