{"version":3,"sources":["../src/log.ts"],"names":["logTimePeriodDivider","undefined","lastLogMessage","Date","now","dur","Math","round","console","log","_","repeat","defaultLogger","state","msg","hasIn","value","name","getSubscriberCount","exports","cssStyleGreenOnWhite","cssStyleRedOnWhite","setLogger","loggerFn","logger","logStateChange","isLogEnabled","isNil","enableReactiveStatesLogging","logEnabled","require","cssStyleBlackOnLightblue","join","cssStyleGreyOnWhite","cssStyleBlueOnWhite"],"mappings":"aAcA,SAAAA,uBACI,QAAuBC,IAAnBC,gBAAiCC,KAAKC,MAAQF,eAAkB,KAAM,CACtE,IAAMG,EAAMC,KAAKC,OAAOJ,KAAKC,MAAQF,gBAAkB,KACvDM,QAAQC,IAAI,QAAUC,EAAEC,OAAO,IAAK,KAAO,IAAMN,EAAM,KAE3DH,eAAiBC,KAAKC,MAG1B,SAAAQ,cAA8BC,EAAwBC,GAElD,GAD2BJ,EAAEK,MAAMP,QAAS,SAGrC,CACHR,uBACA,IAAMgB,EAAQH,EAAMG,WACNf,IAAVe,EACAR,QAAQC,IAAI,UAAUI,EAAMI,KAAI,OAAOJ,EAAMK,qBAAoB,OAAQC,QAAAC,qBAAsBJ,GAE/FR,QAAQC,IAAI,UAAUI,EAAMI,KAAI,OAAOJ,EAAMK,qBAAoB,OAAQC,QAAAE,mBAAoBL,QAPjGR,QAAQC,IAAI,QAAQI,EAAMI,KAAI,OAAOJ,EAAMK,qBAAoB,OAAOL,EAAMG,OAcpF,SAAAM,UAA0BC,GACtBC,OAASD,EAGb,SAAAE,eAA+BZ,EAAwBC,GAC/CY,iBAAmBhB,EAAEiB,MAAMd,EAAMI,OACjCO,OAAOX,EAAOC,GAKtB,SAAAc,8BACIC,YAAa,EAGjB,SAAAH,eACI,OAAOG,kEAvDX,IAAAnB,EAAAoB,QAAA,UAGaX,QAAAY,0BAA4B,sBAAuB,gBAAgBC,KAAK,KACxEb,QAAAc,qBAAuB,oBAAqB,kBAAkBD,KAAK,KACnEb,QAAAe,qBAAuB,oBAAqB,kBAAkBF,KAAK,KACnEb,QAAAC,sBAAwB,oBAAqB,kBAAkBY,KAAK,KACpEb,QAAAE,oBAAsB,oBAAqB,kBAAkBW,KAAK,KAG/E,IAAIH,YAAa,EAEb3B,oBAAqCD,EAEzCkB,QAAAnB,qBAAAA,qBAQAmB,QAAAP,cAAAA,cAeA,IAAIY,OAASZ,cAEbO,QAAAG,UAAAA,UAIAH,QAAAM,eAAAA,eAOAN,QAAAS,4BAAAA,4BAIAT,QAAAO,aAAAA","file":"log.js","sourcesContent":["import * as _ from \"lodash\";\nimport {State} from \"./State\";\n\nexport const cssStyleBlackOnLightblue = [\"background: #e1edff\", \"color: black\"].join(\";\");\nexport const cssStyleGreyOnWhite = [\"background: white\", \"color: #5b5b5b\"].join(\";\");\nexport const cssStyleBlueOnWhite = [\"background: white\", \"color: #0003d5\"].join(\";\");\nexport const cssStyleGreenOnWhite = [\"background: white\", \"color: #00830f\"].join(\";\");\nexport const cssStyleRedOnWhite = [\"background: white\", \"color: #9d0002\"].join(\";\");\n\n\nlet logEnabled = false;\n\nlet lastLogMessage: number | undefined = undefined;\n\nexport function logTimePeriodDivider() {\n    if (lastLogMessage !== undefined && (Date.now() - lastLogMessage) > 1500) {\n        const dur = Math.round((Date.now() - lastLogMessage) / 1000);\n        console.log(\"[RS] \" + _.repeat(\"-\", 100) + \" \" + dur + \"s\");\n    }\n    lastLogMessage = Date.now();\n}\n\nexport function defaultLogger(state: State<any, any>, msg?: string) {\n    const isBrowser: boolean = _.hasIn(console, \"group\");\n    if (!isBrowser) {\n        console.log(`[RS] ${state.name} {o=${state.getSubscriberCount()}} = ${state.value}`);\n    } else {\n        logTimePeriodDivider();\n        const value = state.value;\n        if (value !== undefined) {\n            console.log(`%c[RS] ${state.name} {o=${state.getSubscriberCount()}} %o`, cssStyleGreenOnWhite, value);\n        } else {\n            console.log(`%c[RS] ${state.name} {o=${state.getSubscriberCount()}} %o`, cssStyleRedOnWhite, value);\n        }\n    }\n}\n\nlet logger = defaultLogger;\n\nexport function setLogger(loggerFn: typeof defaultLogger) {\n    logger = loggerFn;\n}\n\nexport function logStateChange(state: State<any, any>, msg?: string) {\n    if (isLogEnabled() && !_.isNil(state.name)) {\n        logger(state, msg);\n    }\n}\n\n\nexport function enableReactiveStatesLogging() {\n    logEnabled = true;\n}\n\nexport function isLogEnabled() {\n    return logEnabled;\n}\n"],"sourceRoot":"/"}