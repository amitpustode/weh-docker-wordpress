import { Observable } from "rxjs";
import { Subject } from "rxjs/Subject";
export declare type IsNonValueFn<T, X> = (x: T | X) => x is X;
export declare type AfterConnectFn<T, X> = (state: State<T, X>, setStateFn: (val: T | X) => void) => void;
export declare type AfterDisConnectFn<T, X> = (state: State<T, X>, setStateFn: (val: T | X) => void) => void;
export declare class State<T, X = undefined> {
    readonly isNonValue: (val: T | X) => val is X;
    private readonly afterConnect;
    private readonly afterDisconnect;
    name: string | null;
    logEnabled: boolean;
    pristine: boolean;
    outputStreamTrailing: Subject<T | X>;
    protected stateValue: T | X;
    private inputStream;
    private sourceSubscription;
    private observerCount;
    private timestampOfLastValue;
    private outputStream;
    private value$;
    private nonValue$;
    constructor(source$: Observable<T | X>, isNonValue: (val: T | X) => val is X, afterConnect: AfterConnectFn<T, X>, afterDisconnect: AfterDisConnectFn<T, X>);
    connect(): this;
    disconnect(): this;
    isConnected(): boolean;
    isValueOlderThan(timeoutInMs: number): boolean;
    /**
     * Returns true if this state has a value.
     */
    hasValue(): boolean;
    changes$(reason?: string): Observable<T | X>;
    changesPromise(): PromiseLike<T | X>;
    values$(reason?: string): Observable<T>;
    valuesPromise(): PromiseLike<T | undefined>;
    nonValues$(reason?: string): Observable<X>;
    nonValuesPromise(): PromiseLike<T | X>;
    readonly value: T | X;
    getValueOr<B>(or: B): T | B;
    mapOr<R>(fn: (v: T) => R, orValue: R): R;
    forEach(fn: (v: T) => void): this;
    readonly text: string;
    getSubscriberCount(): number;
    hasSubscribers(): boolean;
    protected onObserverSubscribed(): void;
    protected onObserverUnsubscribed(): void;
    protected log(): void;
    protected setInnerValue(val: T | X): void;
    private wrapObserve<O>($, reason?);
}
export declare function observableToState<T>(input$: Observable<T | undefined>): State<T, undefined>;
