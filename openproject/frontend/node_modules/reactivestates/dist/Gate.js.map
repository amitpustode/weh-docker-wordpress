{"version":3,"sources":["../src/Gate.ts"],"names":["gateFor","input","Gate","rxjs_1","require","State_1","_super","_this","this","trigger","Subject","stream","withLatestFrom","changes$","t","i","call","val","isNonValue","state","setState","undefined","trigger$","input$","passOne","next","__extends","State","exports"],"mappings":"aAmCA,SAAAA,QAA8BC,GAC1B,OAAO,IAAIC,KAAKD,yYApCpB,IAAAE,OAAAC,QAAA,QACAC,QAAAD,QAAA,WAEAF,KAAA,SAAAI,GAQI,SAAAJ,EAAYD,GAAZ,IAAAM,EAAAC,KACUC,EAAU,IAAIN,OAAAO,QAEdC,EAA4BF,EACzBG,eACOX,EAAMY,WACN,SAACC,EAAGC,GAAM,OAAAA,WAE1BR,EAAAD,EAAAU,KAAAR,KACQG,EACA,SAACM,GAAuB,OAAAhB,EAAMiB,WAAWD,IACzC,SAACE,EAAOC,GACJA,OAASC,IACV,SAACF,EAAOC,GACPA,OAASC,MACXb,KAEVD,EAAKe,SAAWb,EAChBF,EAAKgB,OAAStB,EACdM,EAAKiB,QAAU,WAAM,OAAAjB,EAAKe,SAASG,MAAK,MAGhD,OA9BgCC,UAAAxB,EAAAI,GA8BhCJ,GA9BgCG,QAAAsB,OAAnBC,QAAA1B,KAAAA,KAgCb0B,QAAA5B,QAAAA","file":"Gate.js","sourcesContent":["import {Observable, Subject} from \"rxjs\";\nimport {State} from \"./State\";\n\nexport class Gate<T, X> extends State<T, X|undefined> {\n\n    private readonly trigger$: Subject<boolean>;\n\n    private readonly input$: State<T, X>;\n\n    public readonly passOne: () => void;\n\n    constructor(input: State<T, X>) {\n        const trigger = new Subject<boolean>();\n\n        const stream: Observable<T | X> = trigger\n                .withLatestFrom(\n                        input.changes$(),\n                        (t, i) => i);\n\n        super(\n                stream,\n                (val: any): val is X => input.isNonValue(val),\n                (state, setState) => {\n                    setState(undefined);\n                }, (state, setState) => {\n                    setState(undefined);\n                });\n\n        this.trigger$ = trigger;\n        this.input$ = input;\n        this.passOne = () => this.trigger$.next(true);\n    }\n\n}\n\nexport function gateFor<T, X>(input: State<T, X>): Gate<T, X> {\n    return new Gate(input);\n}\n\n"],"sourceRoot":"/"}