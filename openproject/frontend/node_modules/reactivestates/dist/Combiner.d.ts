import { State } from "./State";
export declare class CombinerState<T extends Array<any>, X extends Array<any>> extends State<T, X> {
    constructor(states: State<any, any>[]);
}
export declare function combine<T1, T1X, T2, T2X>(state1: State<T1, T1X>, state2: State<T2, T2X>): CombinerState<[T1, T2], [T1X, T2X]>;
export declare function combine<T1, T1X, T2, T2X, T3, T3X>(state1: State<T1, T1X>, state2: State<T2, T2X>, state3: State<T3, T3X>): CombinerState<[T1, T2, T3], [T1X, T2X, T3X]>;
export declare function combine<T1, T1X, T2, T2X, T3, T3X, T4, T4X>(state1: State<T1, T1X>, state2: State<T2, T2X>, state3: State<T3, T3X>, state4: State<T4, T4X>): CombinerState<[T1, T2, T3, T4], [T1X, T2X, T3X, T4X]>;
export declare function combine<T1, T1X, T2, T2X, T3, T3X, T4, T4X, T5, T5X>(state1: State<T1, T1X>, state2: State<T2, T2X>, state3: State<T3, T3X>, state4: State<T4, T4X>, state5: State<T5, T5X>): CombinerState<[T1, T2, T3, T4, T5], [T1X, T2X, T3X, T4X, T5X]>;
export declare function combine<T1, T1X, T2, T2X, T3, T3X, T4, T4X, T5, T5X, T6, T6X>(state1: State<T1, T1X>, state2: State<T2, T2X>, state3: State<T3, T3X>, state4: State<T4, T4X>, state5: State<T5, T5X>, state6: State<T6, T6X>): CombinerState<[T1, T2, T3, T4, T5, T6], [T1X, T2X, T3X, T4X, T5X, T6X]>;
