{"version":3,"sources":["../src/ReplayableState.ts"],"names":["replayable","state","replayableState","ReplayableState","Object","setPrototypeOf","getPrototypeOf","Observable_1","require","Subject_1","State_1","_super","input","_this","this","replay$","Subject","merged","Observable","merge","changes$","call","isNonValue","__extends","prototype","replay","hasValue","next","value","State","exports"],"mappings":"aA8BA,SAAAA,WAAwDC,GACpD,IAAIC,EAAkB,IAAIC,gBAAgBF,GAE1C,OADAG,OAAOC,eAAeD,OAAOE,eAAeJ,GAAkBD,GACvDC,wYAjCX,IAAAK,aAAAC,QAAA,mBACAC,UAAAD,QAAA,gBACAE,QAAAF,QAAA,WAEAL,gBAAA,SAAAQ,GAII,SAAAR,EAAYS,GAAZ,IAAAC,EAAAC,KACUC,EAAU,IAAIN,UAAAO,QACdC,EAASV,aAAAW,WAAWC,MAAMP,EAAMQ,WAAYL,UAClDF,EAAAF,EAAAU,KAAAP,KACQG,EACAL,EAAMU,WACN,aAEA,eAEPR,KACDD,EAAKE,QAAUA,IASvB,OAxB2CQ,UAAApB,EAAAQ,GAkBvCR,EAAAqB,UAAAC,OAAA,WACQX,KAAKY,YACLZ,KAAKC,QAAQY,KAAKb,KAAKc,QAInCzB,GAxB2CO,QAAAmB,OAA9BC,QAAA3B,gBAAAA,gBA0Bb2B,QAAA9B,WAAAA","file":"ReplayableState.js","sourcesContent":["import {Observable} from \"rxjs/Observable\";\nimport {Subject} from \"rxjs/Subject\";\nimport {State} from \"./State\";\n\nexport class ReplayableState<T, X> extends State<T, X> {\n\n    private readonly replay$: Subject<T | X>;\n\n    constructor(input: State<T, X>) {\n        const replay$ = new Subject<T>();\n        const merged = Observable.merge(input.changes$(), replay$);\n        super(\n                merged,\n                input.isNonValue,\n                () => {\n                },\n                () => {\n                }\n        );\n        this.replay$ = replay$;\n    }\n\n    replay(): void {\n        if (this.hasValue()) {\n            this.replay$.next(this.value);\n        }\n    }\n\n}\n\nexport function replayable<T, X, S extends State<T, X>>(state: State<T, X>): ReplayableState<T, X> {\n    let replayableState = new ReplayableState(state);\n    Object.setPrototypeOf(Object.getPrototypeOf(replayableState), state);\n    return replayableState as any;\n}\n"],"sourceRoot":"/"}