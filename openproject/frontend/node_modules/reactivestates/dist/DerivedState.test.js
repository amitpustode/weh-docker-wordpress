"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var DerivedState_1=require("./DerivedState"),InputState_1=require("./InputState");describe("DerivedState",function(){it("can transform the changes$ stream with deriveRaw()",function(){var e=[],t=InputState_1.input();t.logEnabled=!0;var a=DerivedState_1.deriveRaw(t,function(e,t){return e.map(function(e){return t.isNonValue(e)?-1:e+1e3})});t.changes$().subscribe(function(t){e.push("input:"+JSON.stringify(t))}),a.changes$().subscribe(function(t){e.push("derived:"+JSON.stringify(t))}),t.putValue(1),t.putValue(void 0),t.putValue(2),assert.deepEqual(e,["input:undefined","derived:-1","input:1","derived:1001","input:undefined","derived:-1","input:2","derived:1002"])}),it("can transform the values$ stream with derive()",function(){var e=[],t=InputState_1.input(),a=DerivedState_1.derive(t,function(e){return e.map(function(e){return e+1e3})});t.changes$().subscribe(function(t){e.push("state1:"+JSON.stringify(t))}),a.changes$().subscribe(function(t){e.push("state2:"+JSON.stringify(t))}),t.putValue(1),t.putValue(void 0),t.putValue(2),assert.deepEqual(e,["state1:undefined","state2:undefined","state1:1","state2:1001","state1:undefined","state2:undefined","state1:2","state2:1002"])}),it("inherits the cleared-state from its input",function(){var e=InputState_1.input(1),t=DerivedState_1.derive(e,function(e){return e.map(function(e){return e+1e3})});t.values$().subscribe(),assert.equal(e.value,1),assert.equal(t.value,1001),e.clear(),assert.isFalse(e.hasValue()),assert.isFalse(t.hasValue())}),it("can filter/limit the input stream",function(){var e=InputState_1.input(1),t=DerivedState_1.derive(e,function(e){return e.filter(function(e){return 2===e})});t.values$().subscribe(),assert.equal(e.value,1),assert.isFalse(t.hasValue()),e.putValue(2),assert.equal(e.value,2),assert.isTrue(t.hasValue())}),it("can switch to a cleared state independent from its input",function(){var e=InputState_1.input(1),t=DerivedState_1.derive(e,function(e){return e.map(function(e){return 2===e?void 0:e})});t.values$().subscribe(),assert.equal(e.value,1),assert.equal(t.value,1),e.putValue(2),assert.equal(e.value,2),assert.isFalse(t.hasValue())}),it("can have an initial value",function(){var e=[],t=InputState_1.input();DerivedState_1.derive(t,function(e){return e},1).changes$().subscribe(function(t){return e.push(t)}),t.putValue(2),assert.deepEqual(e,[1,2])}),it("initial value is only used at the beginning, not as a replacement for cleared",function(){var e=[],t=InputState_1.input();DerivedState_1.derive(t,function(e){return e},1).changes$().subscribe(function(t){return e.push(t)}),t.putValue(2),t.clear(),assert.deepEqual(e,[1,2,void 0])})});
//# sourceMappingURL=DerivedState.test.js.map
