{"version":3,"sources":["../src/Store.test.ts"],"names":["Store_1","require","describe","it","store","_super","S","__extends","prototype","action1","this","action","data","field1","Store","calls","select","subscribe","s","push","assert","equal","deepEqual","undefined","isUndefined","done","_this","setTimeout","afterAction","field2","changedFields","newFields","Array","from"],"mappings":"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","file":"Store.test.js","sourcesContent":["import {Store} from \"./Store\";\nimport {enableReactiveStatesLogging} from \"./log\";\n\ndescribe(\"Store\", function () {\n\n    it(\"an action can create a new field\", function () {\n        class S extends Store<{ field1?: number }> {\n            action1() {\n                this.action(\"action1\", data => {\n                    data.field1 = 1;\n                });\n            }\n        }\n        const store = new S({});\n        const calls: any[] = [];\n        store.select(\"field1\").subscribe(s => calls.push(s.data.field1));\n        store.action1();\n        assert.equal(store.data.field1, 1);\n        assert.deepEqual(calls, [1]);\n    });\n\n    it(\"an action can change a field\", function () {\n        class S extends Store<{ field1?: number }> {\n            action1() {\n                this.action(\"action1\", data => {\n                    data.field1 = 1;\n                });\n            }\n        }\n        const store = new S({field1: 0});\n        assert.equal(store.data.field1, 0);\n        const calls: any[] = [];\n        store.select(\"field1\").subscribe(s => calls.push(s.data.field1));\n        store.action1();\n        assert.equal(store.data.field1, 1);\n        assert.deepEqual(calls, [0, 1]);\n    });\n\n    it(\"an action can set a field to undefined\", function () {\n        class S extends Store<{ field1?: number }> {\n            action1() {\n                this.action(\"action1\", data => {\n                    data.field1 = undefined;\n                });\n            }\n        }\n        const store = new S({field1: 1});\n        const calls: any[] = [];\n        store.select(\"field1\").subscribe(s => calls.push(s.data.field1));\n        store.action1();\n        assert.isUndefined(store.data.field1);\n        assert.deepEqual(calls, [1, undefined]);\n    });\n\n    it(\"access to this.data is isolated inside an action\", function (done) {\n        class S extends Store<{ field1?: number }> {\n            action1() {\n                this.action(\"action1\", data => {\n                    data.field1 = 1;\n                    assert.equal(this.data.field1, 0);\n                    assert.equal(data.field1, 1);\n                    done();\n                });\n            }\n        }\n        const store = new S({field1: 0});\n        store.action1();\n    });\n\n    it(\"nested actions can see dirty outer changes\", function (done) {\n        class S extends Store<{ field1?: number }> {\n            action1() {\n                this.action(\"outer\", data => {\n                    data.field1 = 1;\n                    this.action(\"inner\", data => {\n                        assert.equal(data.field1, 1);\n                        done();\n                    });\n                });\n            }\n        }\n        const store = new S({field1: 0});\n        store.action1();\n    });\n\n    it(\"changes done by nested actions will afterwards be visible in outer actions\", function (done) {\n        class S extends Store<{ field1?: number }> {\n            action1() {\n                this.action(\"outer\", data => {\n                    data.field1 = 1;\n                    assert.equal(data.field1, 1);\n                    this.action(\"inner\", data => {\n                        assert.equal(data.field1, 1);\n                        data.field1 = 2;\n                        assert.equal(data.field1, 2);\n                    });\n                    assert.equal(data.field1, 2);\n                    done();\n                });\n            }\n        }\n        const store = new S({field1: 0});\n        store.action1();\n    });\n\n    it(\"nested actions can be asynchronous\", function (done) {\n        const calls: any[] = [];\n        class S extends Store<{ field1?: number }> {\n            action1() {\n                this.action(\"outer\", data => {\n                    // start inner asynchronous action\n                    setTimeout(() => {\n                        // alter data in inner action\n                        this.action(\"inner\", data => {\n                            data.field1 = 2;\n                        }, {\n                            afterAction: () => {\n                                assert.deepEqual(calls, [0, 1, 2]);\n                                done();\n                            }\n                        });\n                    }, 0);\n\n                    // alter data in outer action\n                    data.field1 = 1;\n                });\n            }\n        }\n        const store = new S({field1: 0});\n        store.select(\"field1\").subscribe(s => calls.push(s.data.field1));\n        store.action1();\n    });\n\n\n    it(\"callback afterAction\", function (done) {\n        class S extends Store<{ field1?: number, field2?: number }> {\n            action1() {\n                this.action(\"action1\", data => {\n                    data.field1 = 1;\n                    data.field2 = 5;\n                }, {\n                    afterAction: (store, data, changedFields, newFields) => {\n                        assert.equal(data.field1, 1);\n                        assert.equal(data.field2, 5);\n                        assert.deepEqual(Array.from(changedFields), [\"field1\"]);\n                        assert.deepEqual(Array.from(newFields), [\"field2\"]);\n                        done();\n                    }\n                });\n            }\n        }\n        const store = new S({field1: 0});\n        store.action1();\n    });\n\n});\n"],"sourceRoot":"/"}