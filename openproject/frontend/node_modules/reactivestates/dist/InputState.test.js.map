{"version":3,"sources":["../src/InputState.test.ts"],"names":["InputState_1","require","rxjs_1","describe","it","s1","input","assert","isFalse","hasValue","values$","subscribe","Error","done","changes$","i","equal","values","push","disconnect","connect","deepEqual","undefined","putValue","clear","doModify","val","Observable","of","clearAndPutFromPromise","timer","take","toPromise","isTrue","hasActivePromiseRequest","isPristine","putFromPromiseIfPristine"],"mappings":"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","file":"InputState.test.js","sourcesContent":["import {input} from \"./InputState\";\nimport {Observable} from \"rxjs\";\n\ndescribe(\"InputState\", function () {\n\n    it(\"is empty after creation\", function () {\n        const s1 = input();\n        assert.isFalse(s1.hasValue());\n\n        s1.values$().subscribe(() => {\n            throw new Error();\n        });\n    });\n\n    it(\"can have an initial value\", function (done) {\n        const s1 = input(5);\n        s1.changes$().subscribe(i => {\n            assert.equal(i, 5);\n            done();\n        });\n    });\n\n    it(\"replays the initial value on every connect\", function () {\n        const values: any[] = [];\n        const s1 = input(5);\n        s1.changes$().subscribe(i => {\n            values.push(i);\n        });\n\n        s1.disconnect();\n        s1.connect();\n        s1.disconnect();\n        s1.connect();\n\n        assert.deepEqual(values, [5, undefined, 5, undefined, 5]);\n    });\n\n    it(\"broadcasts value\", function (done) {\n        const s1 = input<number>();\n        s1.putValue(1);\n        s1.changes$().subscribe(i => {\n            assert.equal(i, 1);\n            done();\n        });\n    });\n\n    it(\"can be cleared\", function () {\n        const s1 = input(5);\n        s1.clear();\n        s1.values$().subscribe(() => {\n            throw new Error(\"state should be cleared\");\n        });\n    });\n\n    it(\"can modify the state from a value\", function (done) {\n        const s1 = input(5);\n        s1.doModify(val => val + 1);\n        s1.values$().subscribe(val => {\n            assert.equal(val, 6);\n            done();\n        });\n    });\n\n    it(\"can modify the state from Observable\", function (done) {\n        const s1 = input(5);\n        s1.doModify(val => Observable.of(val + 1));\n        s1.values$().subscribe(val => {\n            assert.equal(val, 6);\n            done();\n        });\n    });\n\n    it(\"can modify the state if it has a nonValue\", function (done) {\n        const s1 = input();\n\n        s1.doModify(() => {\n            throw new Error(\"must not be called\");\n        }, () => 9);\n\n        s1.values$().subscribe(val => {\n            assert.equal(val, 9);\n            done();\n        });\n    });\n\n    it(\"calls doOnValue with initial value of 0\", function (done) {\n        const s1 = input(0);\n        s1.values$().subscribe(val => {\n            assert.equal(val, 0);\n            done();\n        });\n    });\n\n    it(\"putFromPromise\", function (done) {\n        const s1 = input(0);\n        s1.clearAndPutFromPromise(Observable.timer(0).take(1).toPromise());\n        assert.isFalse(s1.hasValue());\n        s1.values$().subscribe(val => {\n            assert.equal(val, 0);\n            assert.isTrue(s1.hasValue());\n            done();\n        });\n    });\n\n    it(\"hasActivePromiseRequest\", function (done) {\n        const s1 = input(0);\n        s1.clearAndPutFromPromise(Observable.timer(0).take(1).toPromise());\n        assert.isFalse(s1.hasValue());\n        assert.isTrue(s1.hasActivePromiseRequest());\n\n        s1.values$().subscribe(val => {\n            assert.equal(val, 0);\n            assert.isTrue(s1.hasValue());\n            assert.isFalse(s1.hasActivePromiseRequest());\n            done();\n        });\n    });\n\n    it(\"isPristine\", function () {\n        const s1 = input<number>();\n        assert.isTrue(s1.isPristine());\n        s1.clearAndPutFromPromise(Observable.timer(0).take(1).toPromise());\n        assert.isFalse(s1.isPristine());\n        assert.isFalse(s1.hasValue());\n    });\n\n    it(\"putFromPromiseIfPristine\", function (done) {\n        const s1 = input<number>();\n\n        s1.putFromPromiseIfPristine(() => Observable.timer(0).take(1).toPromise());\n        assert.isTrue(s1.hasActivePromiseRequest());\n        assert.isFalse(s1.hasValue());\n\n        s1.putFromPromiseIfPristine(() => {\n            throw new Error(\"must not be called\");\n        });\n\n        s1.values$().subscribe(val => {\n            assert.equal(val, 0);\n            assert.isTrue(s1.hasValue());\n            assert.isFalse(s1.hasActivePromiseRequest());\n            done();\n        });\n    });\n\n});\n"],"sourceRoot":"/"}