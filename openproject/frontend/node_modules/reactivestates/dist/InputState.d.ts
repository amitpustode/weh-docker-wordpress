import { Observable } from "rxjs";
import { State } from "./State";
export declare class InputState<T> extends State<T, undefined> {
    private state;
    private timestampOfLastPromise;
    constructor(initialValue: T | undefined);
    putValue(val: T | undefined, reason?: string): this;
    clearAndPutFromPromise(promise: PromiseLike<T>): this;
    isPristine(): boolean;
    hasActivePromiseRequest(): boolean;
    isPromiseRequestOlderThan(timeoutInMs: number): boolean;
    putFromPromiseIfPristine(calledIfPristine: () => PromiseLike<T>): this;
    clear(reason?: string): this;
    doModify(valueMapper: (val: T) => T | Observable<T>, or?: () => T | Observable<T>): this;
}
export declare function input<T>(initValue?: T | undefined): InputState<T>;
