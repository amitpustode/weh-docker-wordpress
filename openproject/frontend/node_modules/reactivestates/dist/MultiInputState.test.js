"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var MultiInputState_1=require("./MultiInputState");describe("StateCache",function(){it("is empty after creation",function(){var e=MultiInputState_1.multiInput();assert.deepEqual(e.value,{})}),it("fills previously requested states",function(){var e=MultiInputState_1.multiInput().get("a"),t=[];e.changes$().subscribe(function(e){t.push(e)}),e.putValue("a"),assert.deepEqual(t,[void 0,"a"])}),it("can remove entries",function(){var e=MultiInputState_1.multiInput();e.get("a").putValue("a"),e.remove("a"),assert.deepEqual(e.value,{})}),it("removing a states also disconnects it",function(){var e=MultiInputState_1.multiInput(),t=e.get("a");t.putValue("a"),assert.isTrue(t.isConnected()),e.remove("a"),assert.isFalse(t.isConnected())}),it("change events can be observed",function(e){var t=MultiInputState_1.multiInput(),a=0;t.observeChange().subscribe(function(t){var u=t[0],n=t[1],s=t[2];0===a?assert.isUndefined(n):(assert.equal(u,"a"),assert.equal(n,"a"),assert.equal(s.value,"a"),e()),a++}),t.get("a").putValue("a")}),it("remove events can be observed",function(e){var t=MultiInputState_1.multiInput();t.get("a").putValue("a"),t.observeRemove().filter(function(e){return"a"===e}).subscribe(function(t){assert.equal(t,"a"),e()}),t.remove("a")})});
//# sourceMappingURL=MultiInputState.test.js.map
