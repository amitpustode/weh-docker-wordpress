{"version":3,"sources":["../src/InputState.ts"],"names":["input","initValue","undefined","InputState","rxjs_1","require","State_1","_super","initialValue","_this","this","isNonValue","val","afterConnect","state","setStateFn","afterDisConnect","hasValue","Subject","call","timestampOfLastPromise","__extends","prototype","putValue","reason","next","clearAndPutFromPromise","promise","clear","Date","now","then","value","isPristine","hasActivePromiseRequest","isPromiseRequestOlderThan","timeoutInMs","putFromPromiseIfPristine","calledIfPristine","doModify","valueMapper","or","values$","take","subscribe","oldVal","newInput","Observable","newVal","orInput","State","exports"],"mappings":"aA0GA,SAAAA,MAAyBC,GACrB,YADqB,IAAAA,IAAAA,OAAAC,GACd,IAAIC,WAAWF,yYA3G1B,IAAAG,OAAAC,QAAA,QACAC,QAAAD,QAAA,WAEAF,WAAA,SAAAI,GAMI,SAAAJ,EAAYK,GAAZ,IAAAC,EAAAC,KACUC,EAAa,SAACC,GAChB,YAAeV,IAARU,GAELC,EAA6C,SAACC,EAAOC,GACvDA,EAAWP,IAETQ,EAAmD,SAACF,EAAOC,GACzDD,EAAMG,YACNF,OAAWb,IAIbY,EAAQ,IAAIV,OAAAc,eAClBT,EAAAF,EAAAY,KAAAT,KAAMI,EAAOH,EAAYE,EAAcG,IAAgBN,KAEvDD,EAAKK,MAAQA,EACbL,EAAKW,wBAA0B,IA8EvC,OArGmCC,UAAAlB,EAAAI,GA0B/BJ,EAAAmB,UAAAC,SAAA,SAASX,EAAoBY,GAEzB,OADAd,KAAKI,MAAMW,KAAKb,GACTF,MAGXP,EAAAmB,UAAAI,uBAAA,SAAuBC,GAAvB,IAAAlB,EAAAC,KAiBI,OAhBIA,KAAKO,YACLP,KAAKkB,QAETlB,KAAKU,uBAAyBS,KAAKC,MACnCH,EAAQI,KAEA,SAACC,GACGvB,EAAKW,wBAA0B,EAC/BX,EAAKc,SAASS,IAGlB,WACIvB,EAAKW,wBAA0B,EAC/BX,EAAKmB,UAGVlB,MAGXP,EAAAmB,UAAAW,WAAA,WACI,OAAQvB,KAAKO,aAAeP,KAAKwB,2BAGrC/B,EAAAmB,UAAAY,wBAAA,WACI,OAAwC,IAAjCxB,KAAKU,wBAGhBjB,EAAAmB,UAAAa,0BAAA,SAA0BC,GAEtB,OADiBP,KAAKC,MAAQpB,KAAKU,uBACjBgB,GAGtBjC,EAAAmB,UAAAe,yBAAA,SAAyBC,GAIrB,OAHI5B,KAAKuB,cACLvB,KAAKgB,uBAAuBY,KAEzB5B,MAGXP,EAAAmB,UAAAM,MAAA,SAAMJ,GAEF,OADAd,KAAKa,cAASrB,GACPQ,MAGXP,EAAAmB,UAAAiB,SAAA,SAASC,EAA4CC,GAArD,IAAAhC,EAAAC,KACI,GAAIA,KAAKO,WACLP,KAAKgC,UAAUC,KAAK,GAAGC,UAAU,SAAAC,GAC7B,IAAIC,EAAWN,EAAYK,GACvBC,aAAoB1C,OAAA2C,WACpBD,EAASH,KAAK,GAAGC,UAAU,SAAAI,GACvBvC,EAAKc,SAASyB,KAGlBvC,EAAKc,SAASuB,SAGnB,CACH,IAAIG,EAAUR,IACVQ,aAAmB7C,OAAA2C,WACnBE,EAAQN,KAAK,GAAGC,UAAU,SAAAI,GACtBvC,EAAKc,SAASyB,KAGlBtC,KAAKa,SAAS0B,GAGtB,OAAOvC,MAGfP,GArGmCG,QAAA4C,OAAtBC,QAAAhD,WAAAA,WAuGbgD,QAAAnD,MAAAA","file":"InputState.js","sourcesContent":["import {Observable, Subject} from \"rxjs\";\nimport {AfterConnectFn, AfterDisConnectFn, State} from \"./State\";\n\nexport class InputState<T> extends State<T, undefined> {\n\n    private state: Subject<T>;\n\n    private timestampOfLastPromise: number;\n\n    constructor(initialValue: T | undefined) {\n        const isNonValue = (val: T | undefined): val is undefined => {\n            return val === undefined;\n        };\n        const afterConnect: AfterConnectFn<T, undefined> = (state, setStateFn) => {\n            setStateFn(initialValue);\n        };\n        const afterDisConnect: AfterDisConnectFn<T, undefined> = (state, setStateFn) => {\n            if (state.hasValue()) {\n                setStateFn(undefined);\n            }\n        };\n\n        const state = new Subject<T>();\n        super(state, isNonValue, afterConnect, afterDisConnect);\n\n        this.state = state;\n        this.timestampOfLastPromise = -1;\n    }\n\n    putValue(val: T | undefined, reason?: string): this {\n        this.state.next(val);\n        return this;\n    }\n\n    clearAndPutFromPromise(promise: PromiseLike<T>): this {\n        if (this.hasValue()) {\n            this.clear();\n        }\n        this.timestampOfLastPromise = Date.now();\n        promise.then(\n                // success\n                (value: T) => {\n                    this.timestampOfLastPromise = -1;\n                    this.putValue(value);\n                },\n                // error\n                () => {\n                    this.timestampOfLastPromise = -1;\n                    this.clear();\n                }\n        );\n        return this;\n    }\n\n    isPristine(): boolean {\n        return !this.hasValue() && !this.hasActivePromiseRequest();\n    }\n\n    hasActivePromiseRequest() {\n        return this.timestampOfLastPromise !== -1;\n    }\n\n    isPromiseRequestOlderThan(timeoutInMs: number): boolean {\n        const ageValue = Date.now() - this.timestampOfLastPromise;\n        return ageValue > timeoutInMs;\n    }\n\n    putFromPromiseIfPristine(calledIfPristine: () => PromiseLike<T>): this {\n        if (this.isPristine()) {\n            this.clearAndPutFromPromise(calledIfPristine());\n        }\n        return this;\n    }\n\n    clear(reason?: string): this {\n        this.putValue(undefined);\n        return this;\n    }\n\n    doModify(valueMapper: (val: T) => T | Observable<T>, or?: () => T | Observable<T>): this {\n        if (this.hasValue()) {\n            this.values$().take(1).subscribe(oldVal => {\n                let newInput = valueMapper(oldVal);\n                if (newInput instanceof Observable) {\n                    newInput.take(1).subscribe(newVal => {\n                        this.putValue(newVal);\n                    });\n                } else {\n                    this.putValue(newInput);\n                }\n            });\n        } else {\n            let orInput = or!();\n            if (orInput instanceof Observable) {\n                orInput.take(1).subscribe(newVal => {\n                    this.putValue(newVal);\n                });\n            } else {\n                this.putValue(orInput);\n            }\n        }\n        return this;\n    }\n\n}\n\nexport function input<T>(initValue: T | undefined = undefined) {\n    return new InputState(initValue);\n}\n"],"sourceRoot":"/"}