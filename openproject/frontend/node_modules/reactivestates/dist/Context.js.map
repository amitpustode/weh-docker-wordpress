{"version":3,"sources":["../src/Context.ts"],"names":["create","Class","instance","this","onInit","createNewContext","ContextImpl","createChildContext","parent","child","changed$","subscribe","s","next","rxjs_1","require","Subject","exports"],"mappings":"aAmBA,SAAAA,OAA4DC,GACxD,IAAIC,EAAW,IAAID,EAAME,MAMzB,OAJID,EAASE,QACTF,EAASE,SAGNF,EAGX,SAAAG,mBACI,OAAO,IAAIC,YAGf,SAAAC,mBAAmCC,GAC/B,IAAMC,EAAQJ,mBAKd,OAJAI,EAAMC,SAASC,UAAU,SAAAC,GACrBJ,EAAOE,SAASG,KAAKD,KAGlBH,yDAvCX,IAAAK,OAAAC,QAAA,QAQAT,YAAA,WAAA,SAAAA,IAEIH,KAAAO,SAAW,IAAII,OAAAE,QACfb,KAAAH,OAASA,OAEb,OAAAM,KAMAW,QAAAjB,OAAAA,OAUAiB,QAAAZ,iBAAAA,iBAIAY,QAAAV,mBAAAA","file":"Context.js","sourcesContent":["import {Subject} from \"rxjs\";\nimport {State} from \"./State\";\n\nexport interface Context {\n    changed$: Subject<[string, State<any, any>]>;\n    create: typeof create;\n}\n\nclass ContextImpl implements Context {\n\n    changed$ = new Subject<[string, State<any, any>]>();\n    create = create;\n\n}\n\nexport interface Injectable {\n    onInit?: () => any;\n}\n\nexport function create<T extends Injectable>(this: Context, Class: {new(context: Context): T}): T {\n    let instance = new Class(this);\n\n    if (instance.onInit) {\n        instance.onInit();\n    }\n\n    return instance;\n}\n\nexport function createNewContext(): Context {\n    return new ContextImpl();\n}\n\nexport function createChildContext(parent: Context): Context {\n    const child = createNewContext();\n    child.changed$.subscribe(s => {\n        parent.changed$.next(s);\n    });\n\n    return child;\n}\n"],"sourceRoot":"/"}