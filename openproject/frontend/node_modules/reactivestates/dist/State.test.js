"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var rxjs_1=require("rxjs"),State_1=require("./State");describe("State",function(){it("has NonValue after creation",function(){var e=new rxjs_1.Subject,t=State_1.observableToState(e);assert.isFalse(t.hasValue())}),it("future values can be subscribed with values$",function(e){var t=new rxjs_1.Subject;State_1.observableToState(t).values$().subscribe(function(t){assert.equal(t,1),e()}),t.next(1)}),it("changes$ has 'undefined' state after creation",function(e){var t=new rxjs_1.Subject;State_1.observableToState(t).changes$().subscribe(function(t){assert.equal(t,void 0),e()})}),it("nonValues$ has 'undefined' state after creation",function(e){var t=new rxjs_1.Subject;State_1.observableToState(t).nonValues$().subscribe(function(t){assert.equal(t,void 0),e()})}),it("replays the last value",function(e){var t=new rxjs_1.Subject,a=State_1.observableToState(t);t.next(1),a.values$().subscribe(function(t){assert.isTrue(a.hasValue()),assert.equal(t,1),e()})}),it("mapOr",function(){var e=new rxjs_1.Subject,t=State_1.observableToState(e);assert.equal(t.mapOr(function(e){return e.a},1),1),e.next({a:2}),assert.equal(t.mapOr(function(e){return e.a},1),2)}),it("forEach",function(){var e=new rxjs_1.Subject,t=State_1.observableToState(e),a=[];e.next(1),e.next(2),t.forEach(function(e){return a.push(e)}),e.next(3),e.next(4),e.next(5),assert.deepEqual(a,[2,3,4,5])}),it("the value 'undefined' clears the state",function(){var e=new rxjs_1.Subject,t=State_1.observableToState(e);e.next(1),e.next(void 0),assert.isFalse(t.hasValue())}),it("clearing can be observed",function(e){var t=new rxjs_1.Subject,a=State_1.observableToState(t);a.nonValues$().skip(1).subscribe(function(t){assert.equal(t,void 0),assert.isFalse(a.hasValue()),e()}),t.next(1),t.next(void 0)}),it("can be disconnected/connected",function(e){var t=new rxjs_1.Subject,a=State_1.observableToState(t);a.disconnect(),t.next(1),assert.isFalse(a.hasValue()),a.connect(),t.next(2),assert.isTrue(a.hasValue()),a.values$().subscribe(function(t){assert.isTrue(a.hasValue()),assert.equal(t,2),e()})}),it("remembers the timestamp of the last value",function(e){var t=new rxjs_1.Subject,a=State_1.observableToState(t);t.next(1),setTimeout(function(){assert.isTrue(a.isValueOlderThan(1)),e()},5)}),it("fires correctly when using valuesPromise",function(e){var t=new rxjs_1.Subject,a=State_1.observableToState(t);t.next(1),a.valuesPromise().then(function(){return e()})}),it("counts the number of observers",function(){var e=new rxjs_1.Subject,t=State_1.observableToState(e);assert.equal(t.getSubscriberCount(),0);var a=t.values$().subscribe(function(e){return e});assert.equal(t.getSubscriberCount(),1);var s=t.values$().subscribe(function(e){return e});assert.equal(t.getSubscriberCount(),2),a.unsubscribe(),assert.equal(t.getSubscriberCount(),1),s.unsubscribe(),assert.equal(t.getSubscriberCount(),0)}),it("value / nonValue states over time",function(){var e=new rxjs_1.Subject,t=State_1.observableToState(e),a=[];t.nonValues$().subscribe(function(e){return a.push("nonValue")}),t.values$().subscribe(function(e){return a.push("value:"+e)}),e.next(1),e.next(2),e.next(void 0),e.next(3),assert.deepEqual(a,["nonValue","value:1","value:2","nonValue","value:3"])})});
//# sourceMappingURL=State.test.js.map
