{"version":3,"sources":["../src/MultiInputState.test.ts"],"names":["MultiInputState_1","require","describe","it","s","multiInput","assert","deepEqual","value","stateA","get","calls","changes$","subscribe","val","push","putValue","undefined","remove","sm","isTrue","isConnected","isFalse","done","callCount","observeChange","_a","key","state","isUndefined","equal","observeRemove","filter"],"mappings":"oEAAA,IAAAA,kBAAAC,QAAA,qBAEAC,SAAS,aAAc,WAEnBC,GAAG,0BAA2B,WAC1B,IAAMC,EAAIJ,kBAAAK,aACVC,OAAOC,UAAUH,EAAEI,YAGvBL,GAAG,oCAAqC,WACpC,IACIM,EADMT,kBAAAK,aACKK,IAAI,KACbC,KACNF,EAAOG,WAAWC,UAAU,SAAAC,GACxBH,EAAMI,KAAKD,KAEfL,EAAOO,SAAS,KAChBV,OAAOC,UAAUI,QAAQM,EAAW,QAGxCd,GAAG,qBAAsB,WACrB,IAAMC,EAAIJ,kBAAAK,aACVD,EAAEM,IAAI,KAAKM,SAAS,KACpBZ,EAAEc,OAAO,KACTZ,OAAOC,UAAUH,EAAEI,YAGvBL,GAAG,wCAAyC,WACxC,IAAMgB,EAAKnB,kBAAAK,aACLI,EAASU,EAAGT,IAAI,KACtBD,EAAOO,SAAS,KAChBV,OAAOc,OAAOX,EAAOY,eACrBF,EAAGD,OAAO,KACVZ,OAAOgB,QAAQb,EAAOY,iBAG1BlB,GAAG,gCAAiC,SAAUoB,GAC1C,IAAMJ,EAAKnB,kBAAAK,aAEPmB,EAAY,EAChBL,EAAGM,gBAAgBZ,UAAU,SAACa,OAACC,EAAAD,EAAA,GAAKZ,EAAAY,EAAA,GAAKE,EAAAF,EAAA,GACnB,IAAdF,EACAlB,OAAOuB,YAAYf,IAEnBR,OAAOwB,MAAMH,EAAK,KAClBrB,OAAOwB,MAAMhB,EAAK,KAClBR,OAAOwB,MAAMF,EAAMpB,MAAO,KAC1Be,KAEJC,MAGJL,EAAGT,IAAI,KAAKM,SAAS,OAGzBb,GAAG,gCAAiC,SAAUoB,GAC1C,IAAMJ,EAAKnB,kBAAAK,aACXc,EAAGT,IAAI,KAAKM,SAAS,KAErBG,EAAGY,gBACMC,OAAO,SAAAlB,GAAO,MAAQ,MAARA,IACdD,UAAU,SAAAc,GACPrB,OAAOwB,MAAMH,EAAK,KAClBJ,MAGZJ,EAAGD,OAAO","file":"MultiInputState.test.js","sourcesContent":["import {multiInput} from \"./MultiInputState\";\n\ndescribe(\"StateCache\", function () {\n\n    it(\"is empty after creation\", function () {\n        const s = multiInput<string>();\n        assert.deepEqual(s.value, {});\n    });\n\n    it(\"fills previously requested states\", function () {\n        const s = multiInput<string>();\n        let stateA = s.get(\"a\");\n        const calls: any[] = [];\n        stateA.changes$().subscribe(val => {\n            calls.push(val);\n        });\n        stateA.putValue(\"a\");\n        assert.deepEqual(calls, [undefined, \"a\"]);\n    });\n\n    it(\"can remove entries\", function () {\n        const s = multiInput<string>();\n        s.get(\"a\").putValue(\"a\");\n        s.remove(\"a\");\n        assert.deepEqual(s.value, {});\n    });\n\n    it(\"removing a states also disconnects it\", function () {\n        const sm = multiInput<string>();\n        const stateA = sm.get(\"a\");\n        stateA.putValue(\"a\");\n        assert.isTrue(stateA.isConnected());\n        sm.remove(\"a\");\n        assert.isFalse(stateA.isConnected());\n    });\n\n    it(\"change events can be observed\", function (done) {\n        const sm = multiInput<string>();\n\n        let callCount = 0;\n        sm.observeChange().subscribe(([key, val, state]) => {\n            if (callCount === 0) {\n                assert.isUndefined(val);\n            } else {\n                assert.equal(key, \"a\");\n                assert.equal(val, \"a\");\n                assert.equal(state.value, \"a\");\n                done();\n            }\n            callCount++;\n        });\n\n        sm.get(\"a\").putValue(\"a\");\n    });\n\n    it(\"remove events can be observed\", function (done) {\n        const sm = multiInput<string>();\n        sm.get(\"a\").putValue(\"a\");\n\n        sm.observeRemove()\n                .filter(val => val === \"a\")\n                .subscribe(key => {\n                    assert.equal(key, \"a\");\n                    done();\n                });\n\n        sm.remove(\"a\");\n\n    });\n\n});\n"],"sourceRoot":"/"}